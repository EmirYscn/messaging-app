generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum CHAT_TYPE {
  PUBLIC
  GROUP
  PRIVATE
}

enum FRIEND_REQUEST_STATUS {
  PENDING
  ACCEPTED
  DECLINED
}

enum MESSAGE_STATUS {
  SENT
  DELIVERED
  READ
}

enum MESSAGE_TYPE {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  AUDIO
}

model Profile {
  id  String  @id @default(uuid())
  bio String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String?
  password String?
  role     ROLE    @default(USER)
  avatar   String? // Direct URL to avatar image

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  resetPasswordToken   String?   @unique // Token for password reset
  resetPasswordExpires DateTime? // Expiration date for the token

  mainAppUserId String? @unique// ID of the user in the main app
  mainAppUserProfileId String? // ID of the user's profile in the main app

  profile          Profile?
  chats            Chat[]
  messages         Message[]
  friends          Friendship[]    @relation("Friend1")
  friendOf         Friendship[]    @relation("Friend2")
  sentRequests     FriendRequest[] @relation("Sender")
  receivedRequests FriendRequest[] @relation("Receiver")
}

model Chat {
  id     String    @id @default(uuid())
  name   String?
  avatar String? // Direct URL to chat avatar image
  type   CHAT_TYPE // Type of chat (e.g., group, private)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  lastMessage   Message? @relation("ChatLastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull)
  lastMessageId String?  @unique // ID of the last message sent in the chat

  users    User[]
  messages Message[]
}

model Message {
  id      String       @id @default(uuid())
  content String
  type    MESSAGE_TYPE @default(TEXT)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  replyTo   Message?  @relation("MessageReply", fields: [replyToId], references: [id])
  replyToId String? // ID of the message being replied to
  replies   Message[] @relation("MessageReply")

  chatAsLastMessage Chat?   @relation("ChatLastMessage")
  media             Media[] // List of media files associated with the message
}

model Friendship {
  id      String @id @default(uuid())
  user1   User   @relation("Friend1", fields: [user1Id], references: [id])
  user1Id String

  user2   User   @relation("Friend2", fields: [user2Id], references: [id])
  user2Id String

  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id        String                @id @default(uuid())
  status    FRIEND_REQUEST_STATUS @default(PENDING) // e.g., "pending", "accepted", "declined"
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  sender   User   @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  receiver   User   @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId]) // Unique constraint to prevent duplicate friend requests
  @@index([senderId])
  @@index([receiverId])
}

model Media {
  id        String     @id @default(uuid())
  url       String // URL to the media file
  filePath  String // Local file path to the media file
  type      MEDIA_TYPE // Type of media (e.g., image, video, audio)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?
}
